"""
Convert DOT file to json file. The DOT format is expected to be
generated by python graphviz library, though it might work with
other tools, currently it is only tested for graphviz generated
graphs. This is a convenience script to export a random forest
model trained with sklearn's RandomForestClassifier algorithm
from DOT format to json format, so that it can be used in other
programming languages.
"""

import re
import json
import sys
import os
"""
Reads a single line of the file, ending with semicolon ";".

Post-Condition: If "}" character is reached then empty string is
  returned, otherwise the line read up to the ";" or EOF character
  is returned with leading and trailing spaces and newlines removed.
"""
def readline(f):
    line = ""
    while True:
        c = f.read(1)
        if c == "}":
            return ""
        if c == ";" or not c:
            return line.strip()
        line += c

"""
Extract the label of the node, which contains information about the
node's class, and the condition that node represents.
"""
def extract_label(line):
    m = re.search("\Wlabel=\"(.+?)\"", line)
    if m:
        return m.group(1)

"""
Post-Condition: Return the tuple containing the left and right node
  stated on a single line of the DOT file. If only one node is present
  then it is in the first tuple value and the second tuple value will be
  None. If two nodes are present then both values in the tuple are not
  None. Otherwise both tuple values are None.
"""
def get_node(line):
    if re.search("->", line):
        g = re.search("(.+?) -> ([^\s]+)", line)
        return g.group(1), g.group(2)
    else:
        m = re.search("(.+?)\s", line)
        if m:
            return m.group(1), None
    return None, None

"""
Convert a DOT file that can contain multiple graphs to a json file
containing a list of graph json objects, each graph json object
contains two json objects, the nodes joson object and the edges json object.
The nodes json object contains a list of node json objects that contains
the id, condition or class, depending on if node is leaf node or not.
The edges json object contains a list of edge json objects that contains
the source, target and direction of the edge.
"""
def convert_file(filename, out="model.json"):
    jarr = []
    with open(filename, "r") as f:
        # Outer while loop to loop through all graphs
        while True:
            # To begin we first find the beginning curly bracket
            # that indicates the start of the graph object
            c = None
            while True:
                c = f.read(1)
                if not c or c == "{":
                    break
            if not c:
                # EOF reached
                break

            js = {}
            js["nodes"] = []
            js["edges"] = []
            line = None    
            while True:
                line = readline(f)
                if not line:
                    break

                label = extract_label(line)
                if not label and not re.search("->", line):
                    continue

                left, right = get_node(line)
                if label:
                    # node
                    lvals = label.split("\\n")
                    keywords = ["gini", "samples", "value"]
                    for item in list(lvals):
                        for word in keywords:
                            if re.search("{} =".format(word), item):
                                lvals.remove(item)
                                break

                    node = {}
                    node["id"] = left            
                    if len(lvals) > 1:
                        node["condition"] = lvals[0]
                    else:
                        # leaf node
                        m = re.search("class\s*=\s*(.*)", lvals[0])
                        node["class"] = m.group(1)

                    js["nodes"].append(node)
                else:
                    # edge
                    edge = {}
                    edge["source"] = left
                    edge["target"] = right
                    js["edges"].append(edge)

            # for each node map its left/right edge
            for node in js["nodes"]:
                nid = node["id"]
                direction = "left"
                for edge in js["edges"]:
                    if edge["source"] == nid:
                        edge["direction"] = direction
                        if direction == "right":
                            break
                        direction = "right"
            jarr.append(js)

            if line == None:
                break
            
    buf = json.dumps(jarr)
    with open(out, "w") as o:
        o.write(buf)
        
    print("Output file: {}".format(out))

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage {} model.dot".format(sys.argv[1]))
        exit(0)
    filename = sys.argv[1]

    dirname = os.path.dirname(filename)
    if not dirname:
        dirname = "."
    
    out = dirname + "/model.json"
    convert_file(filename, out)
